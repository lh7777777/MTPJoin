/*
 * Copyright (C) 2011-2020 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */
    include "time.h"

	from "sgx_tstdc.edl" import *;

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */

    trusted{

        //public void ecall_init([out,size=1024] void* mb);
        public void ecall_init(int order);
        public int ecall_search(int key,[user_check]void* mbdes,[user_check]char** mbpool);
        public void ecall_insert([in,size=100]void* key_rid,[user_check]void* mbdes,[user_check]char** mbpool);
        public void ecall_traversal();
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {

        void ocall_print_string([in, string] const char *str);
        void ocall_readpage(int page_id, [out,size=4096]char* buffer_field);
        void ocall_writepage(int page_id, [in,size=4096]char* buffer_field);

        long ocall_sgx_clock(void); // For performance evaluation
		time_t ocall_sgx_time([out, size=t_len]time_t *timep, int t_len);
		struct tm *ocall_sgx_localtime([in, size=t_len]const time_t *timep, int t_len);
		struct tm *ocall_sgx_gmtime_r([in, size=t_len]const time_t *timep, int t_len, [out, size=tmp_len]struct tm *tmp, int tmp_len);
		int ocall_sgx_gettimeofday([in, out, size=tv_size]void *tv, int tv_size);
		int ocall_sgx_getsockopt(int s, int level, int optname, [out, size=optval_len]char *optval, int optval_len, [in,out, size=4]int* optlen);
		int ocall_sgx_setsockopt(int s, int level, int optname, [in, size=optlen]const void *optval, int optlen);
		int ocall_sgx_socket(int af, int type, int protocol);
		int ocall_sgx_listen(int s, int backlog);
		int ocall_sgx_bind(int s, [in, size=addr_size]const void *addr, int addr_size);
		int ocall_sgx_connect(int s, [in, size=addrlen]const void *addr, int addrlen);
		int ocall_sgx_accept(int s, [out, size=addr_size]void *addr, int addr_size, [in, out, size=4]int *addrlen);
		int ocall_sgx_shutdown(int fd, int how);
		int ocall_sgx_read(int fd, [out, size=n]void *buf, int n);
		int ocall_sgx_write(int fd, [in, size=n]const void *buf, int n);
		int ocall_sgx_close(int fd);
		int ocall_sgx_getenv([in,size=envlen]const char *env, int envlen, [out,size=ret_len]char *ret_str,int ret_len);
		//void ocall_print_string([in, string] const char *str);

    };

};
